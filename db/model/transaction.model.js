import mongoose from "mongoose";

const transactionSchema = new mongoose.Schema({
  id: Number,
  pending: Boolean,
  amount_cents: Number,
  success: Boolean,
  is_auth: Boolean,
  is_capture: Boolean,
  is_standalone_payment: Boolean,
  is_voided: Boolean,
  is_refunded: Boolean,
  is_3d_secure: Boolean,
  integration_id: Number,
  profile_id: Number,
  has_parent_transaction: Boolean,
  order: {
    id: Number,
    created_at: Date,
    delivery_needed: Boolean,
    merchant: Object,
    collector: Object,
    amount_cents: Number,
    shipping_data: Object,
    currency: String,
    is_payment_locked: Boolean,
    is_return: Boolean,
    is_cancel: Boolean,
    is_returned: Boolean,
    is_canceled: Boolean,
    merchant_order_id: String,
    wallet_notification: Object,
    paid_amount_cents: Number,
    notify_user_with_email: Boolean,
    items: Array,
    order_url: String,
    commission_fees: Number,
    delivery_fees_cents: Number,
    delivery_vat_cents: Number,
    payment_method: String,
    merchant_staff_tag: String,
    api_source: String,
    data: Object
  },
  created_at: Date,
  transaction_processed_callback_responses: Array,
  currency: String,
  source_data: {
    pan: String,
    type: String,
    tenure: String,
    sub_type: String
  },
  api_source: String,
  terminal_id: String,
  merchant_commission: Number,
  installment: String,
  discount_details: Array,
  is_void: Boolean,
  is_refund: Boolean,
  data: {
    gateway_integration_pk: Number,
    klass: String,
    created_at: Date,
    amount: Number,
    currency: String,
    migs_order: Object,
    merchant: String,
    migs_result: String,
    migs_transaction: Object,
    txn_response_code: String,
    acq_response_code: String,
    message: String,
    merchant_txn_ref: String,
    order_info: String,
    receipt_no: String,
    transaction_no: String,
    batch_no: Number,
    authorize_id: String,
    card_type: String,
    card_num: String,
    secure_hash: String,
    avs_result_code: String,
    avs_acq_response_code: String,
    captured_amount: Number,
    authorised_amount: Number,
    refunded_amount: Number,
    acs_eci: String
  },
  is_hidden: Boolean,
  payment_key_claims: {
    exp: Number,
    extra: Object,
    pmk_ip: String,
    user_id: Number,
    currency: String,
    order_id: Number,
    amount_cents: Number,
    billing_data: Object,
    integration_id: Number,
    lock_order_when_paid: Boolean,
    single_payment_attempt: Boolean
  },
  error_occured: Boolean,
  is_live: Boolean,
  other_endpoint_reference: String,
  refunded_amount_cents: Number,
  source_id: Number,
  is_captured: Boolean,
  captured_amount: Number,
  merchant_staff_tag: String,
  updated_at: Date,
  is_settled: Boolean,
  bill_balanced: Boolean,
  is_bill: Boolean,
  owner: String,
  parent_transaction: String,
  issuer_bank: String,
  transaction_processed_callback_responses: String
});

const transaction = mongoose.model("Transaction", transactionSchema);

export default transaction;
